name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize]

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PORT: ${{ secrets.DB_PORT }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests
        run: |
          cd backend
          npm test

  build-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend-dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia según tu región

      - name: Deploy to EC2
        run: |
          # Instalar AWS CLI si no está
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

          # Crear script de deploy
          cat <<EOF > deploy.sh
          #!/bin/bash
          # Instalar Node.js si no está
          if ! command -v node &> /dev/null; then
            curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
          fi

          # Instalar PM2
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi

          # Instalar PostgreSQL si no está
          if ! command -v psql &> /dev/null; then
            sudo yum install -y postgresql-server postgresql-contrib
            sudo postgresql-setup initdb
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
          fi

          # Crear DB user y database si no existen
          sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '${DB_USER}') THEN CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}'; END IF; END \$\$;"
          sudo -u postgres psql -c "SELECT 'CREATE DATABASE ${DB_NAME} OWNER ${DB_USER}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${DB_NAME}')\\gexec"

          # Crear directorio de app
          mkdir -p ~/app

          # Copiar archivos de build
          cp -r ./backend-dist/* ~/app/

          # Crear .env
          echo "DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:${DB_PORT}/${DB_NAME}" > ~/app/.env

          # Instalar dependencias de producción
          cd ~/app
          npm install --production

          # Generar Prisma client
          npx prisma generate

          # Ejecutar migraciones
          npx prisma migrate deploy

          # Iniciar app con PM2
          pm2 stop backend || true
          pm2 start dist/index.js --name "backend"
          pm2 save
          pm2 startup
          EOF

          # Hacer ejecutable el script
          chmod +x deploy.sh

          # Enviar script a EC2 y ejecutarlo
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deploy.sh ec2-user@${{ secrets.EC2_INSTANCE }}:~/
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_INSTANCE }} "DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DB_NAME=${DB_NAME} DB_PORT=${DB_PORT} ./deploy.sh"
